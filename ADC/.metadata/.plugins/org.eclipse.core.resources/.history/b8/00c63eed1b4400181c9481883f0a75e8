//Aula 15 e 16 em 17/04 e 19/04
//ADC funcionando: controle de duty cycle pelo potenciometro funcionando
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"
#include "driverlib/adc.h"
#include "driverlib/pwm.h"
#include "driverlib/timer.h"

#define PIN GPIO_PIN_0
#define PINADC GPIO_PIN_3

uint32_t dataIn[8];
uint32_t FREQ = 10000;

void pwmStart(){
    TimerConfigure(TIMER0_BASE, TIMER_CFG_SPLIT_PAIR | TIMER_CFG_A_PWM | TIMER_CFG_B_PERIODIC);
    TimerLoadSet(TIMER0_BASE, TIMER_BOTH, 120000000/FREQ);
    TimerMatchSet(TIMER0_BASE, TIMER_BOTH, 0.1*120000000/FREQ);
    TimerEnable(TIMER0_BASE, TIMER_BOTH);
}

void pegaADC(){
    if(ADCIntStatusEx(ADC0_BASE, true) & ADC_INT_SS3){
        ADCSequenceDataGet(ADC0_BASE, 3, dataIn);
        ADCIntClearEx(ADC0_BASE, ADC_INT_SS3);
        TimerMatchSet(TIMER0_BASE, TIMER_A, (dataIn[0](1/4095.0))(120000000/FREQ));
    }
}

int main(void)
{
    SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ |
                          SYSCTL_OSC_MAIN |
                           SYSCTL_USE_PLL |
                           SYSCTL_CFG_VCO_480), 120000000);

    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_ADC0));
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_TIMER0)){}
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOD)){}
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOE)){}

    GPIOPinConfigure(GPIO_PD0_T0CCP0);
    GPIOPinTypePWM(GPIO_PORTD_BASE, PIN);
    GPIOPinTypeADC(ADC0_BASE, PINADC);

    //Configuração do timer do PWM
    TimerClockSourceSet(TIMER0_BASE, TIMER_CLOCK_SYSTEM);
    TimerControlTrigger(TIMER0_BASE, TIMER_B, true);
    pwmStart();

    //Configuração do ADC
    ADCClockConfigSet(ADC0_BASE, ADC_CLOCK_SRC_PLL | ADC_CLOCK_RATE_FULL, 15);
    ADCSequenceConfigure(ADC0_BASE, 3, ADC_TRIGGER_TIMER, 0);
    ADCSequenceStepConfigure(ADC0_BASE, 3, 0, ADC_CTL_IE | ADC_CTL_END | ADC_CTL_CH0); //Tem 8 espaços (canais), mas utiliza apenas o canal 0, então salva na posição 0
    ADCSequenceEnable(ADC0_BASE, 3);

    //Configuração da interrupção (associada ao TIMERCONTROLTRIGGER)
    ADCIntRegister(ADC0_BASE, 3, &pegaADC);
    ADCIntEnableEx(ADC0_BASE, ADC_INT_SS3);

    while(1){
    }
}